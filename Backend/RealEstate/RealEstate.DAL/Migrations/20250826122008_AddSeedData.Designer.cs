// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealEstate.DAL.Persistance;

#nullable disable

namespace RealEstate.DAL.Migrations
{
    [DbContext(typeof(RealEstateDbContext))]
    [Migration("20250826122008_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a282b0b3-fbbf-4b62-829c-7be617214e1e"),
                            ConcurrencyStamp = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("15f3ddd2-4f37-4db3-8d74-a94efc03db20"),
                            ConcurrencyStamp = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae"),
                            RoleId = new Guid("a282b0b3-fbbf-4b62-829c-7be617214e1e")
                        },
                        new
                        {
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e"),
                            RoleId = new Guid("15f3ddd2-4f37-4db3-8d74-a94efc03db20")
                        },
                        new
                        {
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2"),
                            RoleId = new Guid("15f3ddd2-4f37-4db3-8d74-a94efc03db20")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Favorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId", "PropertyId")
                        .IsUnique();

                    b.ToTable("Favorites");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a1b2c3d-e5f6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTime(2025, 8, 16, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(226),
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-e6f7-8901-bcde-f23456789012"),
                            CreatedAt = new DateTime(2025, 8, 18, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(234),
                            PropertyId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("1a3c4d5e-f7a8-9012-cdef-345678901234"),
                            CreatedAt = new DateTime(2025, 8, 21, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(236),
                            PropertyId = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456"),
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("1a4d5e6f-a8b9-0123-def4-567890123456"),
                            CreatedAt = new DateTime(2025, 8, 14, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(238),
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("1a5e6f7a-b9c0-1234-ef56-789012345678"),
                            CreatedAt = new DateTime(2025, 8, 19, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(239),
                            PropertyId = new Guid("e5f6a7b8-c9d0-1234-ef56-789012345678"),
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("1a6f7a8b-c0d1-2345-ef67-890123456789"),
                            CreatedAt = new DateTime(2025, 8, 23, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(242),
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("1a7a8b9c-d1e2-3456-ef78-901234567890"),
                            CreatedAt = new DateTime(2025, 8, 11, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(245),
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae")
                        },
                        new
                        {
                            Id = new Guid("1a8b9c0d-e2f3-4567-ef89-012345678901"),
                            CreatedAt = new DateTime(2025, 8, 20, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(246),
                            PropertyId = new Guid("e5f6a7b8-c9d0-1234-ef56-789012345678"),
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae")
                        });
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Inquiry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("Inquiries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a2b3c4d-e5f6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTime(2025, 8, 21, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(167),
                            Message = "Доброго дня! Цікавлюся цією квартирою. Чи можна домовитися про перегляд? Який час буде зручно?",
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-f6a7-8901-bcde-f23456789012"),
                            CreatedAt = new DateTime(2025, 8, 22, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(171),
                            Message = "Дуже подобається будинок! Чи можна дізнатися більше про комунальні платежі та податки?",
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-a7b8-9012-cdef-345678901234"),
                            CreatedAt = new DateTime(2025, 8, 23, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(173),
                            Message = "Ідеально для студента! Чи можна зняти на довгострок? Який депозит потрібен?",
                            PropertyId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("4d5e6f7a-b8c9-0123-def4-567890123456"),
                            CreatedAt = new DateTime(2025, 8, 24, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(174),
                            Message = "Розкішний пентхаус! Чи можна домовитися про перегляд в суботу?",
                            PropertyId = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456"),
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("5e6f7a8b-c9d0-1234-ef56-789012345678"),
                            CreatedAt = new DateTime(2025, 8, 25, 12, 20, 7, 885, DateTimeKind.Utc).AddTicks(177),
                            Email = "elena.petrenko@gmail.com",
                            Message = "Доброго дня! Цікавлюся квартирою. Чи можна дізнатися про парковку?",
                            Name = "Олена Петренко",
                            Phone = "0501234567",
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890")
                        },
                        new
                        {
                            Id = new Guid("6f7a8b9c-d0e1-2345-ef67-890123456789"),
                            CreatedAt = new DateTime(2025, 8, 26, 0, 20, 7, 885, DateTimeKind.Utc).AddTicks(181),
                            Email = "mikhail.ivanenko@ukr.net",
                            Message = "Дуже подобається будинок! Чи можна дізнатися про школу та садочок поблизу?",
                            Name = "Михайло Іваненко",
                            Phone = "0679876543",
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012")
                        },
                        new
                        {
                            Id = new Guid("7a8b9c0d-e1f2-3456-ef78-901234567890"),
                            CreatedAt = new DateTime(2025, 8, 26, 6, 20, 7, 885, DateTimeKind.Utc).AddTicks(183),
                            Email = "anna.kovalenko@yahoo.com",
                            Message = "Студія виглядає чудово! Чи можна зняти на місяць?",
                            Name = "Анна Коваленко",
                            Phone = "0634567890",
                            PropertyId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234")
                        },
                        new
                        {
                            Id = new Guid("8b9c0d1e-f2a3-4567-ef89-012345678901"),
                            CreatedAt = new DateTime(2025, 8, 26, 10, 20, 7, 885, DateTimeKind.Utc).AddTicks(184),
                            Email = "viktor.sydorenko@gmail.com",
                            Message = "Пентхаус просто неймовірний! Чи можна домовитися про перегляд?",
                            Name = "Віктор Сидоренко",
                            Phone = "0509876543",
                            PropertyId = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456")
                        });
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Property", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Bathrooms")
                        .HasColumnType("integer");

                    b.Property<int>("Bedrooms")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Features")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyType")
                        .HasColumnType("integer");

                    b.Property<double>("SquareMeters")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Location");

                    b.HasIndex("Price");

                    b.HasIndex("PropertyType");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            Address = "вул. Хрещатик, 15, Київ",
                            Bathrooms = 2,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 7, 27, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9576),
                            Description = "Розкішна 3-кімнатна квартира з ремонтом, меблями та технікою. Ідеальне розташування, поруч метро, магазини, ресторани.",
                            Features = "Меблі,Техніка,Кондиціонер,Балкон,Парковка",
                            Location = 6,
                            Price = 85000m,
                            PropertyType = 2,
                            SquareMeters = 85.5,
                            Status = 1,
                            Title = "Сучасна квартира в центрі міста",
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae")
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012"),
                            Address = "вул. Садова, 42, Буча",
                            Bathrooms = 3,
                            Bedrooms = 4,
                            CreatedAt = new DateTime(2025, 8, 1, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9594),
                            Description = "Двоповерховий будинок з великим садом та гаражем. Тиха вулиця, зелена зона, ідеально для сім'ї.",
                            Features = "Сад,Гараж,Камін,Тераса,Підвал",
                            Location = 2,
                            Price = 250000m,
                            PropertyType = 1,
                            SquareMeters = 180.0,
                            Status = 1,
                            Title = "Затишний будинок з садом",
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234"),
                            Address = "вул. Студентська, 8, Київ",
                            Bathrooms = 1,
                            Bedrooms = 1,
                            CreatedAt = new DateTime(2025, 8, 6, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9599),
                            Description = "Компактна студія з сучасним ремонтом. Ідеально для молодих людей або студентів. Розумна ціна.",
                            Features = "Меблі,Техніка,Wi-Fi,Безпека",
                            Location = 6,
                            Price = 35000m,
                            PropertyType = 2,
                            SquareMeters = 35.0,
                            Status = 1,
                            Title = "Студія для молодих",
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456"),
                            Address = "вул. Печерська, 25, Київ",
                            Bathrooms = 2,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 11, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9604),
                            Description = "Розкішний пентхаус на останньому поверсі з панорамним видом на місто. Елітний район, найкраща інфраструктура.",
                            Features = "Панорамні вікна,Тераса,Консьєрж,Підземна парковка,Спортзал",
                            Location = 6,
                            Price = 500000m,
                            PropertyType = 2,
                            SquareMeters = 120.0,
                            Status = 1,
                            Title = "Пентхаус з панорамним видом",
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae")
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-1234-ef56-789012345678"),
                            Address = "вул. Торгова, 10, Київ",
                            Bathrooms = 1,
                            Bedrooms = 0,
                            CreatedAt = new DateTime(2025, 8, 16, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9608),
                            Description = "Готове комерційне приміщення для бізнесу. Висока прохідність, зручне розташування, можна відкрити магазин або кафе.",
                            Features = "Вхід з вулиці,Вентиляція,Електрика,Водопостачання",
                            Location = 6,
                            Price = 180000m,
                            PropertyType = 7,
                            SquareMeters = 150.0,
                            Status = 1,
                            Title = "Комерційне приміщення",
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        },
                        new
                        {
                            Id = new Guid("f6a7b8c9-d0e1-2345-ef67-890123456789"),
                            Address = "вул. Центральна, 5, Київ",
                            Bathrooms = 1,
                            Bedrooms = 2,
                            CreatedAt = new DateTime(2025, 8, 21, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9612),
                            Description = "Сучасна квартира з ремонтом. Зручне розташування, поруч транспорт та магазини.",
                            Features = "Меблі,Балкон,Парковка",
                            Location = 6,
                            Price = 65000m,
                            PropertyType = 2,
                            SquareMeters = 55.0,
                            Status = 1,
                            Title = "Сучасна квартира з ремонтом",
                            UserId = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2")
                        },
                        new
                        {
                            Id = new Guid("a7b8c9d0-e1f2-3456-ef78-901234567890"),
                            Address = "вул. Бізнесова, 15, Київ",
                            Bathrooms = 2,
                            Bedrooms = 0,
                            CreatedAt = new DateTime(2025, 8, 23, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9616),
                            Description = "Сучасне офісне приміщення в бізнес-центрі. Ідеально для компаній середнього розміру.",
                            Features = "Конференц-зал,Кухня,Парковка,Охорона",
                            Location = 6,
                            Price = 800000m,
                            PropertyType = 3,
                            SquareMeters = 200.0,
                            Status = 1,
                            Title = "Офісне приміщення в бізнес-центрі",
                            UserId = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae")
                        },
                        new
                        {
                            Id = new Guid("b8c9d0e1-f2a3-4567-ef89-012345678901"),
                            Address = "вул. Елітна, 8, Київ",
                            Bathrooms = 2,
                            Bedrooms = 3,
                            CreatedAt = new DateTime(2025, 8, 24, 12, 20, 7, 884, DateTimeKind.Utc).AddTicks(9620),
                            Description = "Стильна квартира з дизайнерським ремонтом. Елітний район, найкраща інфраструктура.",
                            Features = "Дизайнерський ремонт,Меблі,Техніка,Балкон",
                            Location = 6,
                            Price = 250000m,
                            PropertyType = 2,
                            SquareMeters = 95.0,
                            Status = 1,
                            Title = "Стильна квартира в центрі",
                            UserId = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e")
                        });
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.PropertyImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("PropertyId", "Order");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1a2b3c4-d5e6-7890-abcd-ef1234567890"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890")
                        },
                        new
                        {
                            Id = new Guid("f2b3c4d5-e6f7-8901-bcde-f23456789012"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890")
                        },
                        new
                        {
                            Id = new Guid("f4d5e6f7-a8b9-0123-def4-567890123456"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012")
                        },
                        new
                        {
                            Id = new Guid("f5e6f7a8-b9c0-1234-ef56-789012345678"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("b2c3d4e5-f6a7-8901-bcde-f23456789012")
                        },
                        new
                        {
                            Id = new Guid("f6f7a8b9-c0d1-2345-ef67-890123456789"),
                            ImageUrl = "https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234")
                        },
                        new
                        {
                            Id = new Guid("f7a8b9c0-d1e2-3456-ef78-901234567890"),
                            ImageUrl = "https://images.unsplash.com/photo-1502672260266-1c1ef2d93688?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("c3d4e5f6-a7b8-9012-cdef-345678901234")
                        },
                        new
                        {
                            Id = new Guid("f8b9c0d1-e2f3-4567-ef89-012345678901"),
                            ImageUrl = "https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456")
                        },
                        new
                        {
                            Id = new Guid("f9c0d1e2-f3a4-5678-ef90-123456789012"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("d4e5f6a7-b8c9-0123-def4-567890123456")
                        },
                        new
                        {
                            Id = new Guid("f1e2f3a4-b5c6-7890-ef12-345678901234"),
                            ImageUrl = "https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("e5f6a7b8-c9d0-1234-ef56-789012345678")
                        },
                        new
                        {
                            Id = new Guid("f2f3a4b5-c6d7-8901-ef23-456789012345"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("e5f6a7b8-c9d0-1234-ef56-789012345678")
                        },
                        new
                        {
                            Id = new Guid("f3a4b5c6-d7e8-9012-ef34-567890123456"),
                            ImageUrl = "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("f6a7b8c9-d0e1-2345-ef67-890123456789")
                        },
                        new
                        {
                            Id = new Guid("f4b5c6d7-e8f9-0123-ef45-678901234567"),
                            ImageUrl = "https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("a7b8c9d0-e1f2-3456-ef78-901234567890")
                        },
                        new
                        {
                            Id = new Guid("f5c6d7e8-f9a0-1234-ef56-789012345678"),
                            ImageUrl = "https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop",
                            Order = 0,
                            PropertyId = new Guid("b8c9d0e1-f2a3-4567-ef89-012345678901")
                        });
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb37b3b6-88e7-4b4d-a6fc-56e1d1ed3aae"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ead0fae-3dcc-4dd4-a5e3-2ed4b3dbfffa",
                            CreatedAt = new DateTime(2025, 8, 26, 12, 20, 7, 726, DateTimeKind.Utc).AddTicks(3203),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "REALESTATEADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAWw6poYphgNTmDZyf8Vet/eW7h++YHFVHQBWxJBzF33m6SeE89mD66x0A0iqo0Scw==",
                            PhoneNumber = "0501234567",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "95d58893-e6ce-419a-99c7-087631de4d5e",
                            TwoFactorEnabled = false,
                            UserName = "RealEstateAdmin"
                        },
                        new
                        {
                            Id = new Guid("e2403a4f-0d12-4555-bf66-7338cd13ff3e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39189c79-9656-43c9-b44a-354e7d830e21",
                            CreatedAt = new DateTime(2025, 8, 26, 12, 20, 7, 775, DateTimeKind.Utc).AddTicks(9777),
                            Email = "user1@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@GMAIL.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEFTTh9zbg1gKxDpu+ySFJJEHPus5jMqT/KFhJB4NKHjojwSjPleJO7iu9p4YrGdAlw==",
                            PhoneNumber = "0114573600",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c126fa02-a9ba-40a6-bf60-9ffbdf132415",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = new Guid("d7e228e1-4c36-4ead-8bc1-622bb13140d2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f761f712-9ac1-49ce-800f-eb00b6816058",
                            CreatedAt = new DateTime(2025, 8, 26, 12, 20, 7, 832, DateTimeKind.Utc).AddTicks(1101),
                            Email = "user2@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@GMAIL.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDJjw6SeTUTVzPDmKD7B5uTmBh4UmvVV/mxUwXV4IyCH7+gla9HvHt0cxdUrZL82Q==",
                            PhoneNumber = "0217652388",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29e18140-5b5d-4081-806e-4a6559084126",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Favorite", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.Property", "Property")
                        .WithMany("Favorites")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.DAL.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Inquiry", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.Property", "Property")
                        .WithMany("Inquiries")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Property", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.User", "User")
                        .WithMany("Properties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.PropertyImage", b =>
                {
                    b.HasOne("RealEstate.DAL.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.Property", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Images");

                    b.Navigation("Inquiries");
                });

            modelBuilder.Entity("RealEstate.DAL.Entities.User", b =>
                {
                    b.Navigation("Favorites");

                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
